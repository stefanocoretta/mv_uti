---
title: mvgam_uti
authors:
  - name: Norah Jones
    affiliation: The University
    roles: writing
    corresponding: true
bibliography: references.bib
---

```{r}
#| label: setup

library(tidyverse)
library(coretta2018itapol)
data("dlc_voff")
```

## GAM

### CV coarticulation

```{r}
dlc_voff |> 
  filter(spline == "DLC_Tongue") |> 
  ggplot(aes(X, Y, group = frame_id)) +
  geom_path(alpha = 0.2) +
  # coord_fixed() +
  facet_wrap(vars(speaker), scales = "free")
```


```{r}
dlc_voff |> 
  filter(speaker == "pl04", spline == "DLC_Tongue") |> 
  ggplot(aes(X, Y, colour = vowel, group = frame_id)) +
  geom_path(alpha = 0.75) +
  facet_grid(cols = vars(c2_place)) +
  scale_color_brewer(palette = "Dark2")
```

```{r}
dlc_voff <- dlc_voff |> 
  mutate(
    vow_place = interaction(vowel, c2_place),
    vow_place_lang = interaction(vowel, c2_place, language),
    speaker = as.factor(speaker)
  )
```


```{r}
library(mgcv)

fi <- "data/cache/voff_gam.rds"

if (file.exists(fi)) {
  voff_gam <- readRDS(fi)
} else {
  voff_gam <- gam(
    list(
      X ~ vow_place_lang +
        s(knot, by = vow_place_lang, k = 5) +
        s(knot, speaker, by = vow_place, bs = "fs", m = 1),
      Y ~ vow_place_lang +
        s(knot, by = vow_place_lang, k = 5) +
        s(knot, speaker, by = vow_place, bs = "fs", m = 1)
    ),
    data = dlc_voff,
    family = mvn(d = 2)
  )
  
  saveRDS(voff_gam, fi)
}
```

```{r}
frame_voff <- expand_grid(
  speaker = unique(dlc_voff$speaker),
  vow_place_lang = unique(dlc_voff$vow_place_lang),
  knot = seq(0, 10, by = 0.1)
) |> 
  mutate(
    vow_place = str_remove(vow_place_lang, "\\.Italian"),
    vow_place = str_remove(vow_place, "\\.Polish"),
  )

excl <- c(
  "s(knot,speaker):vow_placea.coronal",
  "s(knot,speaker):vow_placeo.coronal",
  "s(knot,speaker):vow_placeu.coronal",
  "s(knot,speaker):vow_placea.velar",
  "s(knot,speaker):vow_placeo.velar",
  "s(knot,speaker):vow_placeu.velar",
  "s.1(knot,speaker):vow_placea.coronal",
  "s.1(knot,speaker):vow_placeo.coronal",
  "s.1(knot,speaker):vow_placeu.coronal",
  "s.1(knot,speaker):vow_placea.velar",
  "s.1(knot,speaker):vow_placeo.velar",
  "s.1(knot,speaker):vow_placeu.velar"
)

voff_gam_p <- predict(voff_gam, frame_voff, se.fit = TRUE, exclude = excl) |>
  as.data.frame() |>
  as_tibble()
colnames(voff_gam_p) <- c("X", "Y", "X_se", "Y_se")

voff_gam_p <- bind_cols(frame_voff, voff_gam_p) |> 
  # pick any speaker, random effects have been removed
  filter(speaker == "it01") |> 
  mutate(
    X_lo = X - (1.96 * X_se),
    X_hi = X + (1.96 * X_se),
    Y_lo = Y - (1.96 * Y_se),
    Y_hi = Y + (1.96 * Y_se)
  ) |> 
  separate(vow_place_lang, c("vowel", "place", "language"))
```

```{r}
voff_gam_p |> 
  ggplot(aes(X, Y, colour = vowel)) +
  geom_point() +
  facet_grid(cols = vars(place), rows = vars(language)) +
  coord_fixed()
```


```{r}
voff_gam_p |> 
  group_by(place, vowel, language) |> 
  mutate(
    Y_lo = ifelse(Y_lo > min(Y), Y_lo, NA),
    X_hi = ifelse(X_hi < max(X), X_hi, NA),
  ) |> 
  ggplot(aes(X, Y, colour = vowel)) +
  geom_errorbarh(aes(xmin = X_lo, xmax = X_hi), alpha = 0.25) +
  geom_errorbar(aes(ymin = Y_lo, ymax = Y_hi), alpha = 0.25) +
  geom_point(size = 3, alpha = 0.75) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  coord_fixed() +
  facet_grid(cols = vars(place, vowel), rows = vars(language)) +
  theme_light() +
  theme(legend.position = "bottom")
```

```{r}
voff_gam_p |> 
  ggplot(aes(knot, X)) +
  geom_ribbon(aes(ymin = X_lo, ymax = X_hi, fill = vowel), alpha = 0.25) +
  geom_point(aes(colour = vowel), size = 1, alpha = 0.75) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  facet_grid(cols = vars(place), rows = vars(language)) +
  theme_light() +
  theme(legend.position = "bottom")
```

```{r}
voff_gam_p |> 
  ggplot(aes(knot, Y)) +
  geom_ribbon(aes(ymin = Y_lo, ymax = Y_hi, fill = vowel), alpha = 0.25) +
  geom_point(aes(colour = vowel), size = 1, alpha = 0.75) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  facet_grid(cols = vars(place), rows = vars(language)) +
  theme_light() +
  theme(legend.position = "bottom")
```

```{r}
pred_grid_a <- filter(
  frame_voff, vow_place_lang == "a.coronal.Italian",
  speaker == "it01"
)
pred_grid_b <- filter(
  frame_voff, vow_place_lang == "o.coronal.Italian",
  speaker == "it01"
)

pred_a <- predict.gam(voff_gam, pred_grid_a, type = "lpmatrix") |> 
  as_tibble() |> 
  mutate(
    across(starts_with("s(knot,speaker)"), ~0)
  ) |> 
  as.matrix()
pred_a[,1:870] <- 0

pred_b <- predict.gam(voff_gam, pred_grid_b, type = "lpmatrix") |> 
  as_tibble() |> 
  mutate(
    across(starts_with("s(knot,speaker)"), ~0)
  ) |> 
  as.matrix()
pred_b[,1:870] <- 0

pred_diff <- pred_a - pred_b
diff <- as.vector(pred_diff %*% stats::coef(voff_gam))

se <- sqrt(rowSums((pred_diff %*% stats::vcov(voff_gam)) * pred_diff))

diff_out <- pred_grid_a
diff_out$diff <- diff
diff_out$se <- se
diff_out$lower_ci <- diff - se * 1.96
diff_out$upper_ci <- diff + se * 1.96
```

```{r}
diff_out |> 
  ggplot(aes(knot, diff)) +
  geom_hline(yintercept = 0) +
  geom_ribbon(aes(ymin = lower_ci, ymax = upper_ci), alpha = 0.5) +
  geom_point()
```

### Emphaticness

```{r}
la <- readRDS("data/sakr2025/long.la.uti.cvc.df.usable.rds") |> 
  filter(Time.In.Interval == "-35") |> 
  mutate(
    Subject = as.factor(Subject),
    vow_emph = interaction(Vowel, Consonant.Emphaticness)
  )
```

```{r}
la |> 
  ggplot(aes(X, Y, group = Unique.ID)) +
  geom_path(alpha = 0.2) +
  # coord_fixed() +
  facet_wrap(vars(Subject), scales = "free")
```

```{r}
table(la$Knot)

la_f <- la |> 
  # Include only Knot 2-11
  filter(Knot > 2)
```


```{r}
library(mgcv)

fi <- "data/cache/la_gam.rds"

if (file.exists(fi)) {
  la_gam <- readRDS(fi)
} else {
  la_gam <- gam(
    list(
      X ~ vow_emph +
        s(Knot, by = vow_emph, k = 5) +
        s(Knot, Subject, by = vow_emph, bs = "fs", m = 1, k = 5),
      Y ~ vow_emph +
        s(Knot, by = vow_emph, k = 5) +
        s(Knot, Subject, by = vow_emph, bs = "fs", m = 1, k = 5)
    ),
    data = la_f,
    family = mvn(d = 2)
  )
  
  saveRDS(la_gam, fi)
}
```

```{r}
frame_la <- expand_grid(
  Subject = unique(la$Subject),
  vow_emph = unique(la$vow_emph),
  Knot = seq(3, 11, by = 0.1)
)

excl <- c(
  "s(Knot,Subject):vow_emphA.Emphatic",
  "s(Knot,Subject):vow_emphE.Emphatic",
  "s(Knot,Subject):vow_emphI.Emphatic",
  "s(Knot,Subject):vow_emphO.Emphatic",
  "s(Knot,Subject):vow_emphU.Emphatic",
  "s.1(Knot,Subject):vow_emphA.Emphatic",
  "s.1(Knot,Subject):vow_emphE.Emphatic",
  "s.1(Knot,Subject):vow_emphI.Emphatic",
  "s.1(Knot,Subject):vow_emphO.Emphatic",
  "s.1(Knot,Subject):vow_emphU.Emphatic",
  "s(Knot,Subject):vow_emphA.Plain",
  "s(Knot,Subject):vow_emphE.Plain",
  "s(Knot,Subject):vow_emphI.Plain",
  "s(Knot,Subject):vow_emphO.Plain",
  "s(Knot,Subject):vow_emphU.Plain",
  "s.1(Knot,Subject):vow_emphA.Plain",
  "s.1(Knot,Subject):vow_emphE.Plain",
  "s.1(Knot,Subject):vow_emphI.Plain",
  "s.1(Knot,Subject):vow_emphO.Plain",
  "s.1(Knot,Subject):vow_emphU.Plain"
)

la_gam_p <- predict(la_gam, frame_la, se.fit = TRUE, exclude = excl) |>
  as.data.frame() |>
  as_tibble()
colnames(la_gam_p) <- c("X", "Y", "X_se", "Y_se")

la_gam_p <- bind_cols(frame_la, la_gam_p) |> 
  # pick any speaker, random effects have been removed
  filter(Subject == "Sak") |> 
  mutate(
    X_lo = X - (1.96 * X_se),
    X_hi = X + (1.96 * X_se),
    Y_lo = Y - (1.96 * Y_se),
    Y_hi = Y + (1.96 * Y_se)
  ) |> 
  separate(vow_emph, c("Vowel", "Consonant.Emphaticness"))
```

```{r}
la_gam_p |> 
  ggplot(aes(X, Y, colour = Consonant.Emphaticness)) +
  geom_point() +
  facet_grid(cols = vars(Vowel)) +
  coord_fixed() +
  theme(legend.position = "bottom")
```

```{r}
la_gam_p |> 
  group_by(Vowel, Consonant.Emphaticness) |> 
  mutate(
    Y_lo = ifelse(Y_lo > min(Y), Y_lo, NA),
    X_hi = ifelse(X_hi < max(X), X_hi, NA),
  ) |> 
  ggplot(aes(X, Y, colour = Consonant.Emphaticness)) +
  geom_errorbarh(aes(xmin = X_lo, xmax = X_hi), alpha = 0.25, linewidth = 2.5) +
  geom_errorbar(aes(ymin = Y_lo, ymax = Y_hi), alpha = 0.25, linewidth = 1) +
  geom_point(size = 1, alpha = 0.75) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  coord_fixed() +
  facet_grid(cols = vars(Vowel)) +
  theme_light() +
  theme(legend.position = "bottom")

la_gam_p |> 
  ggplot(aes(X, Y, colour = Consonant.Emphaticness)) +
  geom_errorbarh(aes(xmin = X_lo, xmax = X_hi), alpha = 0.25, linewidth = 2.5) +
  # geom_errorbar(aes(ymin = Y_lo, ymax = Y_hi), alpha = 0.25, linewidth = 1) +
  geom_point(size = 1, alpha = 0.75) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  coord_fixed() +
  facet_grid(cols = vars(Vowel)) +
  theme_light() +
  theme(legend.position = "bottom")

la_gam_p |>
  ggplot(aes(X, Y, colour = Consonant.Emphaticness)) +
  # geom_errorbarh(aes(xmin = X_lo, xmax = X_hi), alpha = 0.25, linewidth = 2.5) +
  geom_errorbar(aes(ymin = Y_lo, ymax = Y_hi), alpha = 0.25, linewidth = 1) +
  geom_point(size = 1, alpha = 0.75) +
  scale_color_brewer(type = "qual", palette = "Dark2") +
  coord_fixed() +
  facet_grid(cols = vars(Vowel)) +
  theme_light() +
  theme(legend.position = "bottom")
```


```{r}
la_gam_p_2 <- predict(la_gam, frame_la, se.fit = TRUE) |>
  as.data.frame() |>
  as_tibble()
colnames(la_gam_p_2) <- c("X", "Y", "X_se", "Y_se")

la_gam_p_2 <- bind_cols(frame_la, la_gam_p_2) |>
  mutate(
    X_lo = X - (1.96 * X_se),
    X_hi = X + (1.96 * X_se),
    Y_lo = Y - (1.96 * Y_se),
    Y_hi = Y + (1.96 * Y_se)
  ) |> 
  separate(vow_emph, c("Vowel", "Consonant.Emphaticness"))
```

```{r}
la_gam_p_2 |> 
  ggplot(aes(X, Y, colour = Consonant.Emphaticness)) +
  geom_point() +
  facet_grid(cols = vars(Subject), rows = vars(Vowel)) +
  coord_fixed()
```

## FPCA

### CV coarticulation

```{r}
library(fda)
library(funData)
library(MFPCA)
# install.packages("devtools")
# devtools::install_github("uasolo/landmarkregUtils")
library(landmarkregUtils)
```

```{r}
dlc_voff_long <- dlc_voff |> 
  dplyr::filter(spline == "DLC_Tongue") |> 
  dplyr::select(X, Y, frame_id, knot, vowel, c2_place, language, speaker) |> 
  pivot_longer(c(X, Y), names_to = "dim") |> 
  group_by(dim, speaker) |> 
  mutate(
    value = (value - mean(value)) / sd(value)
  ) |> 
  ungroup()

# build a multiFunData object
curvesFun2D <- lapply(c("X", "Y"), function(y)
  long2irregFunData(dlc_voff_long %>% filter(dim == {{y}}),
                    id = "frame_id",
                    time = "knot",
                    value = "value") %>% 
    as.funData()
) %>% 
  multiFunData()

# Compute FPCA
nPC <- 2
mfpca <- MFPCA(curvesFun2D,
               M = nPC,
               uniExpansions = list(list(type = "uFPCA"),list(type = "uFPCA"))
)

# Prop of explained var
mfpca$values  / sum( mfpca$values)
```

```{r}
# scores st. dev.
sdFun <- mfpca$values %>% sqrt()
# PC curves to be plotted
PCcurves <- expand_grid(PC = 1:nPC,
                        dim = 1:2, 
                        fractionOfStDev = seq(-1, 1, by=.25)) %>%
  group_by(PC, dim, fractionOfStDev) %>%
  reframe(
    funData2long1(
      mfpca$meanFunction[[dim]] +
        fractionOfStDev * sdFun[PC] * mfpca$functions[[dim]][PC],
      time= "knot", value = "value")
  ) %>% 
  mutate(dim = factor(dim, levels = c(2,1), labels = c('Y', 'X')))

ggplot(PCcurves) +
  aes(x = knot, y = value, group = fractionOfStDev, color = fractionOfStDev) +
  geom_line() +
  scale_color_gradient2(low = "blue", mid = "grey", high = "orangered",
                        breaks = c(-1, 0 , 1)) +
  facet_grid(dim ~ PC,
             scales = "free_y",
             labeller = labeller(PC = ~ str_glue("PC{.x}"))) + #,
                                 # dim = Dimlabels)) +
  labs(color = expression(frac(s[k], sigma[k]))) +
  geom_line(data = PCcurves %>% filter(fractionOfStDev == 0), color = 'black', linewidth = 1.2) +
  # mytheme +
  theme(legend.position = "right",
        axis.title.y = element_blank())
```

```{r}
PCcurves_wide <- PCcurves |> 
  pivot_wider(names_from = dim)

PCcurves_wide |> 
  ggplot(aes(x = X, y = Y, group = fractionOfStDev, color = fractionOfStDev)) +
  geom_path() +
  scale_color_gradient2(low = "#762a83", mid = "grey", high = "#1b7837", breaks = c(-1, 0 , 1)) +
  facet_wrap(vars(PC), labeller = labeller(PC = ~ str_glue("PC{.x}"))) +
  coord_fixed()
```


```{r}
# collect PC scores
PCscores <- mfpca$scores %>%
  `colnames<-`( paste0("PC", 1:nPC)) %>%
  as_tibble() %>%
  bind_cols(dlc_voff_long %>% distinct(frame_id, vowel, c2_place, language), .)

# scatterplot PC scores s1 and s2 by Category
PCscores |> 
  filter(PC2 < 0.5) |>
  ggplot(aes(x = PC1, y = PC2, color = vowel)) +
  geom_point() +
  facet_grid(cols = vars(c2_place), rows = vars(language)) +
  scale_color_brewer(palette = "Dark2")
```

### Emphaticness

```{r}
library(fda)
library(funData)
library(MFPCA)
# install.packages("devtools")
# devtools::install_github("uasolo/landmarkregUtils")
library(landmarkregUtils)
```

```{r}
la_long <- la_f |> 
  dplyr::filter(Current.Phone.Class == "Consonant") |> 
  pivot_longer(c(X, Y), names_to = "dim") |> 
  group_by(dim, Subject) |> 
  mutate(
    value = (value - mean(value)) / sd(value)
  ) |> 
  ungroup()

# build a multiFunData object
curvesFun2D <- lapply(c("X", "Y"), function(y)
  long2irregFunData(la_long %>% filter(dim == {{y}}),
                    id = "Unique.ID",
                    time = "Knot",
                    value = "value") %>% 
    as.funData()
) %>% 
  multiFunData()

# Compute FPCA
nPC <- 2
mfpca <- MFPCA(curvesFun2D,
               M = nPC,
               uniExpansions = list(list(type = "uFPCA", 8),list(type = "uFPCA", 8))
               # uniExpansions = list(list(type = "uFPCA", 4),list(type = "uFPCA", 4))
)

# Prop of explained var
mfpca$values  / sum( mfpca$values)
```

```{r}
# scores st. dev.
sdFun <- mfpca$values %>% sqrt()
# PC curves to be plotted
PCcurves <- expand_grid(PC = 1:nPC,
                        dim = 1:2, 
                        fractionOfStDev = seq(-1, 1, by=.25)) %>%
  group_by(PC, dim, fractionOfStDev) %>%
  reframe(
    funData2long1(
      mfpca$meanFunction[[dim]] +
        fractionOfStDev * sdFun[PC] * mfpca$functions[[dim]][PC],
      time= "knot", value = "value")
  ) %>% 
  mutate(dim = factor(dim, levels = c(2,1), labels = c('Y', 'X')))

ggplot(PCcurves) +
  aes(x = knot, y = value, group = fractionOfStDev, color = fractionOfStDev) +
  geom_line() +
  scale_color_gradient2(low = "blue", mid = "grey", high = "orangered",
                        breaks = c(-1, 0 , 1)) +
  facet_grid(dim ~ PC,
             scales = "free_y",
             labeller = labeller(PC = ~ str_glue("PC{.x}"))) + #,
                                 # dim = Dimlabels)) +
  labs(color = expression(frac(s[k], sigma[k]))) +
  geom_line(data = PCcurves %>% filter(fractionOfStDev == 0), color = 'black', linewidth = 1.2) +
  # mytheme +
  theme(legend.position = "right",
        axis.title.y = element_blank())
```

```{r}
PCcurves_wide <- PCcurves |> 
  pivot_wider(names_from = dim)

PCcurves_wide |> 
  ggplot(aes(x = X, y = Y, group = fractionOfStDev, color = fractionOfStDev)) +
  geom_path() +
  scale_color_gradient2(low = "#762a83", mid = "grey", high = "#1b7837", breaks = c(-1, 0 , 1)) +
  facet_grid(cols = vars(PC), labeller = labeller(PC = ~ str_glue("PC{.x}"))) +
  coord_fixed()
```


```{r}
# collect PC scores
PCscores <- mfpca$scores %>%
  `colnames<-`( paste0("PC", 1:nPC)) %>%
  as_tibble() %>%
  bind_cols(la_long %>% distinct(Unique.ID, Consonant.Emphaticness, Vowel, Consonant.Manner, Vowel.Height, Vowel.Frontness, Subject), .)

# scatterplot PC scores s1 and s2 by Category
PCscores |> 
  ggplot(aes(x = PC1, y = PC2, color = Consonant.Emphaticness)) +
  geom_point() +
  facet_grid(cols = vars(Vowel), rows = vars(Consonant.Manner)) +
  scale_color_brewer(palette = "Dark2")

PCscores |> 
  ggplot(aes(x = PC1, y = PC2, colour = Consonant.Emphaticness, shape = Vowel, label = Vowel)) +
  # geom_point() +
  geom_text(size = 2) +
  scale_color_brewer(palette = "Dark2") +
  stat_ellipse() +
  facet_wrap(vars(Subject))
```

```{r}
PCscores |> 
  ggplot(aes(Vowel, PC1, colour = Consonant.Emphaticness)) +
  geom_jitter(position = position_jitterdodge(), alpha = 0.5) +
  scale_color_brewer(palette = "Dark2") +
    facet_wrap(vars(Subject))

PCscores |> 
  ggplot(aes(Vowel, PC2, colour = Consonant.Emphaticness)) +
  geom_jitter(position = position_jitterdodge(), alpha = 0.5) +
  scale_color_brewer(palette = "Dark2") +
    facet_wrap(vars(Subject))
```

